#version 330 core

layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 colorIn;
//layout (location = 2) in vec3 norm;

//uniform vec3 cameraPos;
//uniform vec3 cameraDir;
//uniform vec3 cameraRot;
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
out vec3 colorOut;

void main()
{
//	vec3 cameraToVertex = aPos - cameraPos;
//	float r = length(cameraToVertex);
//	float lr = asin(cameraToVertex.x / r) - cameraDir.z; 
//	float ud = asin(cameraToVertex.y / r) - cameraDir.y; 

//	float viewCos = abs(dot(cameraToVertex, norm) / (length(cameraToVertex) * length(norm)));
	colorOut = colorIn; // * viewCos;
    gl_Position = projection * view * model * vec4(aPos, 1.0);
}